// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id             String           @id @default(cuid())
    firstName      String?
    lastName       String?
    emailAddress   String           @unique
    imageUrl       String?
    credits        Int              @default(150)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    UserToProjects UserToProjects[]
    Question       Question[]
}

model Project {
    id String @id @default(cuid())

    name      String
    githubUrl String

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    deletedAt           DateTime?
    UserToProjects      UserToProjects[]
    Commit              Commit[]
    SourceCodeEmbedding SourceCodeEmbedding[]
    Question            Question[]
    Meeting             Meeting[]
}

model UserToProjects {
    id        String   @id @default(cuid())
    userId    String
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model Commit {
    id String @id @default(cuid())

    hash            String
    authorName      String
    authorAvatarUrl String
    message         String
    timestamp       DateTime
    summary         String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    project   Project @relation(fields: [projectId], references: [id])
}

model SourceCodeEmbedding {
    id String @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")?
    sourceCode       String
    fileName         String
    summary          String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])
}

model Question {
    id String @id @default(cuid())

    question String
    answer   String

    fileReference Json?

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    userId String
    user   User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Meeting {
    id         String        @id @default(cuid())
    meetingUrl String
    name       String
    status     MeetingStatus @default(PROCESSING)

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Issue     Issue[]
}

enum MeetingStatus {
    PROCESSING
    COMPLETED
}

model Issue {
    id String @id @default(cuid())

    start    DateTime
    end      DateTime
    gist     String
    headline String
    summary  String

    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
